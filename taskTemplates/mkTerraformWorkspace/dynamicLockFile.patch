diff --git a/internal/command/meta_dependencies.go b/internal/command/meta_dependencies.go
--- a/internal/command/meta_dependencies.go
+++ b/internal/command/meta_dependencies.go
@@ -46,22 +46,35 @@
 	// in a machine-readable way but we want to treat that as a success
 	// with no locks. There is in theory a race condition here in that
 	// the file could be created or removed in the meantime, but we're not
 	// promising to support two concurrent dependency installation processes.
-	_, err := os.Stat(dependencyLockFilename)
+
+	var lockFileName = dependencyLockFilename;
+	val, ok := os.LookupEnv("NIX_TERRAFORM_LOCKFILE_PATH")
+	if ok {
+		lockFileName = val
+	}
+
+	_, err := os.Stat(lockFileName)
 	if os.IsNotExist(err) {
 		return m.annotateDependencyLocksWithOverrides(depsfile.NewLocks()), nil
 	}

-	ret, diags := depsfile.LoadLocksFromFile(dependencyLockFilename)
+	ret, diags := depsfile.LoadLocksFromFile(lockFileName)
 	return m.annotateDependencyLocksWithOverrides(ret), diags
 }

 // replaceLockedDependencies creates or overwrites the lock file in the
 // current working directory to contain the information recorded in the given
 // locks object.
 func (m *Meta) replaceLockedDependencies(new *depsfile.Locks) tfdiags.Diagnostics {
-	return depsfile.SaveLocksToFile(new, dependencyLockFilename)
+	var lockFileName = dependencyLockFilename;
+	val, ok := os.LookupEnv("NIX_TERRAFORM_LOCKFILE_PATH")
+	if ok {
+		lockFileName = val
+	}
+
+	return depsfile.SaveLocksToFile(new, lockFileName)
 }

 // annotateDependencyLocksWithOverrides modifies the given Locks object in-place
 // to track as overridden any provider address that's subject to testing
diff --git a/internal/command/init.go b/internal/command/init.go
--- a/internal/command/init.go
+++ b/internal/command/init.go
@@ -910,15 +910,15 @@
 			// output to be deterministic.
 			sort.Slice(incompleteProviders, func(i, j int) bool {
 				return incompleteProviders[i] < incompleteProviders[j]
 			})
-			diags = diags.Append(tfdiags.Sourceless(
-				tfdiags.Warning,
-				incompleteLockFileInformationHeader,
-				fmt.Sprintf(
-					incompleteLockFileInformationBody,
-					strings.Join(incompleteProviders, "\n  - "),
-					getproviders.CurrentPlatform.String())))
+			// diags = diags.Append(tfdiags.Sourceless(
+			// 	tfdiags.Warning,
+			// 	incompleteLockFileInformationHeader,
+			// 	fmt.Sprintf(
+			// 		incompleteLockFileInformationBody,
+			// 		strings.Join(incompleteProviders, "\n  - "),
+			// 		getproviders.CurrentPlatform.String())))
 		}

 		if previousLocks.Empty() {
 			// A change from empty to non-empty is special because it suggests
@@ -926,18 +926,18 @@
 			// new configuration. In that case we'll take the opportunity to
 			// say a little about what the dependency lock file is, for new
 			// users or those who are upgrading from a previous Terraform
 			// version that didn't have dependency lock files.
-			c.Ui.Output(c.Colorize().Color(`
-Terraform has created a lock file [bold].terraform.lock.hcl[reset] to record the provider
-selections it made above. Include this file in your version control repository
-so that Terraform can guarantee to make the same selections by default when
-you run "terraform init" in the future.`))
+// 			c.Ui.Output(c.Colorize().Color(`
+// Terraform has created a lock file [bold].terraform.lock.hcl[reset] to record the provider
+// selections it made above. Include this file in your version control repository
+// so that Terraform can guarantee to make the same selections by default when
+// you run "terraform init" in the future.`))
 		} else {
-			c.Ui.Output(c.Colorize().Color(`
-Terraform has made some changes to the provider dependency selections recorded
-in the .terraform.lock.hcl file. Review those changes and commit them to your
-version control system if they represent changes you intended to make.`))
+// 			c.Ui.Output(c.Colorize().Color(`
+// Terraform has made some changes to the provider dependency selections recorded
+// in the .terraform.lock.hcl file. Review those changes and commit them to your
+// version control system if they represent changes you intended to make.`))
 		}

 		moreDiags = c.replaceLockedDependencies(newLocks)
 		diags = diags.Append(moreDiags)
