diff --git a/internal/command/meta_dependencies.go b/internal/command/meta_dependencies.go
--- a/internal/command/meta_dependencies.go
+++ b/internal/command/meta_dependencies.go
@@ -46,22 +46,35 @@
 	// in a machine-readable way but we want to treat that as a success
 	// with no locks. There is in theory a race condition here in that
 	// the file could be created or removed in the meantime, but we're not
 	// promising to support two concurrent dependency installation processes.
-	_, err := os.Stat(dependencyLockFilename)
+
+	var lockFileName = dependencyLockFilename;
+	val, ok := os.LookupEnv("NIX_TERRAFORM_LOCKFILE_PATH")
+	if ok {
+		lockFileName = val
+	}
+
+	_, err := os.Stat(lockFileName)
 	if os.IsNotExist(err) {
 		return m.annotateDependencyLocksWithOverrides(depsfile.NewLocks()), nil
 	}

-	ret, diags := depsfile.LoadLocksFromFile(dependencyLockFilename)
+	ret, diags := depsfile.LoadLocksFromFile(lockFileName)
 	return m.annotateDependencyLocksWithOverrides(ret), diags
 }

 // replaceLockedDependencies creates or overwrites the lock file in the
 // current working directory to contain the information recorded in the given
 // locks object.
 func (m *Meta) replaceLockedDependencies(new *depsfile.Locks) tfdiags.Diagnostics {
-	return depsfile.SaveLocksToFile(new, dependencyLockFilename)
+	var lockFileName = dependencyLockFilename;
+	val, ok := os.LookupEnv("NIX_TERRAFORM_LOCKFILE_PATH")
+	if ok {
+		lockFileName = val
+	}
+
+	return depsfile.SaveLocksToFile(new, lockFileName)
 }

 // annotateDependencyLocksWithOverrides modifies the given Locks object in-place
 // to track as overridden any provider address that's subject to testing
